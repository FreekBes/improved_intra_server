<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
	{% block head %}
	<meta charset='utf-8' />
	<title>{% block title required %}{% endblock %} - Improved Intra 42</title>
	<link rel="shortcut icon" href="{{ url_for('static', filename='favicon.ico') }}" type="image/x-icon" />
	<link rel="icon" type="image/ico" href="{{ url_for('static', filename='favicon.ico') }}" />
	<link rel="stylesheet" href="{{ url_for('static', filename='styles/options.css') }}" />
	<link rel="preconnect" href="https://fonts.googleapis.com" />
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
	<link href="https://fonts.googleapis.com/css2?family=Roboto+Condensed:wght@300&family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet" />
	{% endblock %}
</head>
<body>
	<section id="sidebar">
		<div id="logo-container">
			<img id="logo" src="{{ url_for('static', filename='imgs/logo-wide.png') }}" alt="IMPROVED INTRA 42"/>
		</div>
		<hr />
		<nav id="menu">
			{% include 'v2/options/menu.j2' %}
		</nav>
	</section>
	<noscript>To modify your settings for Improved Intra 42, you need to enable JavaScript.</noscript>
	<main>
		{% block content %}
		{% endblock %}
	</main>
	{% block user_settings required %}
	{# needs to be a script tag with a definition of the user_settings variable (object)#}
	{% endblock %}

	<!-- script to modify the options defined above -->
	<script>
		const optionContainers = document.querySelectorAll('.option-container');
		for (const optionContainer of optionContainers) {
			const options = optionContainer.querySelectorAll('.option-selector .option');
			const slug = optionContainer.getAttribute('data-slug');

			// if the option container is structured in a choice-like manner, add event listeners to the options
			if (optionContainer.classList.contains("choice")) {
				// add event listener for each option
				for (const option of options) {
					option.addEventListener('click', function(ev) {
						// retrieve slug and value to set from the clicked choice
						const optionContainer = ev.currentTarget.closest('.option-container');
						const slug = optionContainer.getAttribute('data-slug');
						console.log('Clicked on options choice for ', slug);
						const val = ev.currentTarget.getAttribute('data-value');
						console.log('Value to be set: ', val);

						// actually set value
						user_settings[slug] = val;

						// update UI
						const activeChoice = optionContainer.querySelector('.option.active');
						activeChoice.classList.remove('active');
						ev.currentTarget.classList.add('active');
					});
				}

				// activate the chosen option
				const choiceToActivate = optionContainer.querySelector('.option-selector .option[data-value="' + user_settings[slug] + '"]');
				if (choiceToActivate) {
					choiceToActivate.classList.add('active');
				}
			}

			// if the option container is structured like a regular input field, add event listeners to the actual input
			if (optionContainer.classList.contains("input")) {
				const input = optionContainer.querySelector('.input-field');

				// add event listener for input change
				input.addEventListener('input', function(ev) {
					// retrieve slug and value to set from the clicked choice
					const optionContainer = ev.currentTarget.closest('.option-container');
					const slug = optionContainer.getAttribute('data-slug');
					const val = ev.currentTarget.value.trim();

					// actually set value
					user_settings[slug] = val;
				});

				// set current value
				input.value = user_settings[slug];
			}
		}
	</script>
</body>
</html>
