<?php
	require_once("include/respond.php");

	@session_start();

	// redirect to delete.php if sync == false, this request is probably a misdirected one then
	if (isset($_POST["sync"]) && $_POST["sync"] === "false" || $_POST["sync"] === 0) {
		http_response_code(307);
		header("Location: delete.php");
		die();
	}

	// include authorization methods
	require_once("include/auth.php");

	// include parsing methods
	require_once("include/parsing.php");

	// set expected values per settings version (starts at version 1)
	// values start with an identifier: S for string, B for boolean, N for number (integer)
	// values with a * are required
	$client_version = 0;
	$latest_version = 1;
	$version_settings = array(null);
	array_push($version_settings, array(
		"S*access_token" => null,
		"S*username" => null,
		"B*sync" => true,
		"S*expires_in" => null,
		"S*created_at" => null,
		"S*refresh_token" => null,
		"Sext_version" => "unknown",
		"Stheme" => "system",
		"Scolors" => "default",
		"Bshow-custom-profiles" => true,
		"Bhide-broadcasts" => false,
		"Blogsum-month" => true,
		"Blogsum-week" => true,
		"Boutstandings" => true,
		"Bhide-goals" => false,
		"Bholygraph-morecursuses" => false,
		"Bold-blackhole" => false,
		"Bclustermap" => true,
		"Scustom-banner-url" => "",
		"Scustom-banner-pos" => "center-center",
		"Slink-github" => "",
		"Bcodam-monit" => true,
		"Bcodam-auto-equip-coa-title" => false
	));
	$version_specifics = $version_settings;
	foreach ($version_specifics as &$version_data) {
		if (empty($version_data)) {
			continue;
		}
		$version_data = array_keys($version_data);
	}
	$version_defaults = $version_settings;
	foreach ($version_defaults as &$version_data) {
		if (empty($version_data)) {
			continue;
		}
		$version_data = array_values($version_data);
	}
	$neverSave = array("access_token", "expires_in", "created_at", "refresh_token");

	// check client settings version
	if (!isset($_GET["v"]) || empty($_GET["v"])) {
		http_response_code(400);
		respond("error", "GET key 'v' (version) is not set, but is required");
	}
	else {
		$client_version = intval($_GET["v"]);
	}
	if (!isset($version_specifics[$client_version])) {
		http_response_code(400);
		respond("error", "Invalid value for GET key 'settings'");
	}

	// trim entire post array
	$_POST = array_map("trim", $_POST);

	// check if expected and required post fields are set
	// save setting to variable if they exist, else get the default configuration
	$userSettings = array();
	$key = null;
	$keyReq = false;
	$keyType = null;
	for ($i = 0; $i < count($version_specifics[$client_version]); $i++) {
		$key = $version_specifics[$client_version][$i];
		$keyType = $key[0];
		$keyReq = $key[1] == '*';
		if ($keyReq) {
			$key = substr($key, 2);
			if (!isset($_POST[$key]) || empty($_POST[$key])) {
				http_response_code(400);
				respond("error", "POST key '".$key."' is not set, but is required to continue");
			}
		}
		else {
			$key = substr($key, 1);
		}
		if (isset($_POST[$key]) && !empty($_POST[$key])) {
			switch ($keyType) {
				case "S":
					$userSettings[$key] = trim($_POST[$key]);
					// hotfixes for null, undefined
					if (strtolower($userSettings[$key]) == "null" || strtolower($userSettings[$key]) == "undefined") {
						$userSettings[$key] = "";
					}
					break;
				case "B":
					$userSettings[$key] = ($_POST[$key] == "true" || intval($_POST[$key]) > 0);
					break;
				case "N":
					$userSettings[$key] = intval($_POST[$key]);
					break;
			}
		}
		else {
			$userSettings[$key] = $version_defaults[$client_version][$i];
		}
	}

	// do some security checks before modifiying files...
	if (!is_valid_username($userSettings["username"])) {
		http_response_code(403);
		respond("warning", "Invalid username");
	}

	// check if access token was generated by this server...
	if (!access_token_accepted($userSettings["access_token"])) {
		http_response_code(406);
		respond("warning", "Used access token was not generated by this server, refused to proceed");
	}

	// check if username matches the one found using the access token provided...
	// line below is commented out since front-end of extension handles access token refreshing (by calling testkey.php)
	// refresh_access_token_if_needed($userSettings["refresh_token"], intval($userSettings["created_at"]), intval($userSettings["expires_in"]));
	$userInfoFromIntra = get_user_info($userSettings["access_token"]);
	if ($userSettings["username"] != $userInfoFromIntra["login"]) {
		http_response_code(403);
		respond("error", "Username does not match the one found using the access token provided", $userInfoFromIntra);
	}

	// remove keys that we do not want to save
	for ($i = 0; $i < count($neverSave); $i++) {
		if (isset($userSettings[$neverSave[$i]])) {
			unset($userSettings[$neverSave[$i]]);
		}
	}

	// add server-set keys
	$userSettings["timestamp"] = time();

	// parse git username (can be gitplatform@username)
	if (!empty($userSettings["link-github"])) {
		parse_github_link($userSettings);
	}

	// check if banner image URL is gone, if so remove it from server
	if (isset($userSettings["custom-banner-url"])) {
		parse_custom_banner_url($userSettings);
	}

	// check if banner image needs to be updated from a file
	if (isset($_FILES["custom-banner-upload"]) && $_FILES["custom-banner-upload"]["size"] > 0 && $_FILES["custom-banner-upload"]["size"] < 10000000) {
		$mime = exif_imagetype($_FILES["custom-banner-upload"]["tmp_name"]);
		if ($mime !== false) {
			delete_old_user_banner($userSettings["username"]);
			$newFileName = "banners/" . $userSettings["username"] . "-" . time() . "." . get_image_ext(null, $mime);
			move_uploaded_file($_FILES["custom-banner-upload"]["tmp_name"], $newFileName);
			$userSettings["custom-banner-url"] = "https://" . $_SERVER["SERVER_NAME"] . substr($_SERVER["REQUEST_URI"], 0, strrpos($_SERVER["REQUEST_URI"], '/') + 1) . $newFileName;
		}
	}

	// save settings for user
	if (file_put_contents("settings/".strval($userSettings["username"]).".json", json_encode($userSettings, JSON_UNESCAPED_UNICODE)) === false) {
		http_response_code(500);
		respond("error", "Could not save settings", $userSettings);
	}
	else {
		http_response_code(201);
		respond("success", "Settings saved", $userSettings);
	}
?>
